use std::net::{TcpListener, TcpStream};
use std::io::{BufReader, BufRead, Write};
use std::sync::{Arc, Mutex};
use std::thread;

fn handle_client(stream: TcpStream, clients: Arc<Mutex<Vec<TcpStream>>>) {
    let mut reader = BufReader::new(stream.try_clone().unwrap());
    loop {
        let mut msg = String::new();
        if reader.read_line(&mut msg).is_err() { break; }
        let peers = clients.lock().unwrap();
        for mut client in peers.iter().filter(|c| c.peer_addr().unwrap() != stream.peer_addr().unwrap()) {
            let _ = client.write_all(msg.as_bytes());
        }
    }
}

fn main() {
    let listener = TcpListener::bind("127.0.0.1:4000").unwrap();
    let clients = Arc::new(Mutex::new(Vec::new()));

    for stream in listener.incoming() {
        let stream = stream.unwrap();
        clients.lock().unwrap().push(stream.try_clone().unwrap());
        let clients = Arc::clone(&clients);
        thread::spawn(move || handle_client(stream, clients));
    }
}
